main:
  params: [args]
  steps:
    - assign_vars:
        assign:
          - request_body : {
            "load": {
              "sourceUris": [
                "${ \"gs://\" + args.bucket + \"/\" + args.object}"
                ],
              "destinationTable": {
                "datasetId": "sample_dataset",
                "projectId": "YOUR_PROJECT",
                "tableId": "generated_table"
              },
              "sourceFormat": "CSV",
              "autodetect": "true",
              "nullMarker": "NA",
              "fieldDelimiter": ","
            }
          }

    - createBigQueryLoadJob:
        call: http.post
        args:
          url: https://bigquery.googleapis.com/bigquery/v2/projects/YOUR_PROJECT_NUMBER/jobs
          body:
            configuration: ${request_body}
          headers:
            Content-Type: "application/json"
          auth:
            type: OAuth2
        result: jobLoadRes

    - getJobFinalStatus:
        call: sub_getJobFinalStatus
        args:
              joburl: ${jobLoadRes.body.selfLink}
        result: finalStatus

    - checkJobResult:
        switch:
          - condition: ${"errorResult" in finalStatus.body.status }
            raise: ${finalStatus.body.status.errors}

    - tagSourceObject:
        call: http.put
        args:
          url: "${\"https://storage.googleapis.com/storage/v1/b/\" + args.bucket + \"/o/\" + args.object }"
          body:
            metadata:
              "status": "loaded"
              "loadJobId": ${finalStatus.body.id}
          headers:
            Content-Type: "application/json"
          auth:
            type: OAuth2

    - returnResult:
        return:
          "jobStatus" : ${finalStatus}

sub_getJobFinalStatus:
    params: [joburl]
    steps:
      - sleep:
          call: sys.sleep
          args:
            seconds: 5
      - getJobCurrentStatus:
          call: http.get
          args:
            url: ${joburl}
            auth:
              type: OAuth2
          result: jobStatusRes
      - isJobFinished:
          switch:
            - condition: ${jobStatusRes.body.status.state == "DONE"}
              return: ${jobStatusRes}
          # else
          next: sleep